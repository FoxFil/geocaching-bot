from dotenv import load_dotenv
import os
import telebot
import sqlite3 as sql
from telebot.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

load_dotenv()

token = os.getenv("TOKEN")
bot = telebot.TeleBot(token)

creation_data = {}


def add_mistake(id, code, question_number):
    try:
        con = sql.connect("geocaches.db")
        cur = con.cursor()
        insertion = """INSERT INTO questions_mistakes
                                  (tg_id, geocache_code, question_number) VALUES (?, ?, ?)"""
        data_tuple = (id, code, question_number)
        cur.execute(insertion, data_tuple)
        con.commit()
        cur.close()

    except sql.Error as error:
        print("Failed to insert data into sqlite table (questions_mistakes)", error)


def get_mistakes(id, code, question_number):
    try:
        con = sql.connect("geocaches.db")
        cur = con.cursor()

        data = cur.execute(
            f"""SELECT * FROM questions_mistakes WHERE tg_id = '{id}' AND geocache_code = '{code}' AND question_number = '{question_number}'"""
        ).fetchall()

        cur.close()

        return len(data)

    except sql.Error as error:
        print("Failed to insert data into sqlite table (questions_mistakes)", error)


def get_geocaches_data(code):
    con = sql.connect("geocaches.db")
    cur = con.cursor()

    data = cur.execute(
        f"""SELECT * FROM geocaches WHERE website_code = '{code}'"""
    ).fetchall()[0]

    cur.close()

    return data


def check_if_in_geocaches(code):
    try:
        con = sql.connect("geocaches.db")
        cur = con.cursor()

        data = cur.execute(
            f"""SELECT * FROM geocaches WHERE website_code = '{code}'"""
        ).fetchall()

        cur.close()

        if len(data) == 1:
            return True
        return False

    except sql.Error as error:
        print("Failed to check data in sqlite table (geocaches)", error)


def check_if_on_confirmation(code):
    try:
        con = sql.connect("geocaches.db")
        cur = con.cursor()

        data = cur.execute(
            f"""SELECT * FROM on_confirmation WHERE website_code = '{code}'"""
        ).fetchall()

        cur.close()

        if len(data) == 1:
            return True
        return False

    except sql.Error as error:
        print("Failed to check data in sqlite table (on_confirmation)", error)


def delete_from_on_confirmation(code):
    try:
        con = sql.connect("geocaches.db")
        cur = con.cursor()

        deletion = f"""DELETE FROM on_confirmation WHERE website_code = '{code}'"""
        cur.execute(deletion)
        con.commit()

        cur.close()

    except sql.Error as error:
        print("Failed to delete data from sqlite table (on_confirmation)", error)


def move_to_db(code):
    try:
        con = sql.connect("geocaches.db")
        cur = con.cursor()

        data = cur.execute(
            f"""SELECT * FROM on_confirmation WHERE website_code = '{code}'"""
        ).fetchall()[0]

        insertion = """INSERT INTO geocaches
                                  (website_code, name, description, image, coordinates, questions, answers) VALUES (?, ?, ?, ?, ?, ?, ?)"""
        cur.execute(insertion, data)
        con.commit()

        delete_from_on_confirmation(code)

        cur.close()

    except sql.Error as error:
        print(
            "Failed to move data from sqlite table (on_confirmation -> geocaches)",
            error,
        )


def insert_in_db(id, name, description, image, coords, questions, answers):
    try:
        con = sql.connect("geocaches.db")
        cur = con.cursor()
        insertion = """INSERT INTO on_confirmation
                                  (website_code, name, description, image, coordinates, questions, answers) VALUES (?, ?, ?, ?, ?, ?, ?)"""

        data_tuple = (id, name, description, image, coords, questions, answers)
        cur.execute(insertion, data_tuple)
        con.commit()
        cur.close()

    except sql.Error as error:
        print("Failed to insert data into sqlite table (on_confirmation)", error)


def check_coords(c: str):
    try:
        if (
            c[0] in ["N", "S"]
            and c[1] == " "
            and c[2:4].isdigit()
            and c[4] == " "
            and c[5:7].isdigit()
            and c[7] == "."
            and c[8:11].isdigit()
            and c[11] == " "
            and c[12] in ["E", "W"]
            and c[13] == " "
            and c[14:16].isdigit()
            and c[16] == " "
            and c[17:19].isdigit()
            and c[19] == "."
            and c[20:].isdigit
            and len(c) == 23
        ):
            return True
        return False
    except Exception:
        return False


def get_parameter(text):
    try:
        return text.split()[1] if len(text.split()) > 1 else False
    except:
        return False


@bot.message_handler(commands=["start", "help"])
def start(message: Message):
    try:
        code = get_parameter(message.text)
        if not code:
            button_create = InlineKeyboardButton(
                "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–Ω–∏–∫", callback_data="create_cache_callbacak"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(button_create)
            bot.send_message(
                message.chat.id,
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–µ —Ç–∞–π–Ω–∏–∫–∏ –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ. –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –Ω–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π —Ç–∞–π–Ω–∏–∫. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –Ω—É–∂–Ω—ã–π —Ç–∞–π–Ω–∏–∫, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —ç—Ç–æ–≥–æ —Ç–∞–π–Ω–∏–∫–∞.",
                reply_markup=keyboard,
            )
        else:
            if check_if_in_geocaches(code):
                data = get_geocaches_data(code)

                button_start = InlineKeyboardButton(
                    "–ù–∞—á–∞—Ç—å!", callback_data=f"start_quest;{data[0]}"
                )
                keyboard = InlineKeyboardMarkup()
                keyboard.add(button_start)

                bot.send_photo(
                    message.chat.id,
                    data[3],
                    f"""–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–∞–π–Ω–∏–∫–∞ *{data[0]}*.

*{data[1]}*

–û–ø–∏—Å–∞–Ω–∏–µ:
{data[2]}""",
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –¢–∞–∫–æ–≥–æ —Ç–∞–π–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.",
                )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


@bot.callback_query_handler(func=lambda x: True)
def button_callback(call: CallbackQuery):
    try:
        data = call.data.split(";")
        match data[0]:
            case "create_cache_callbacak":
                if len(data) > 1:
                    create_cache(call.message, code=data[1])
                else:
                    create_cache(call.message)
            case "start_creation":
                creation_add_code(call.message)
            case "creation_confirmed":
                creation_successful(call.message, data[1])
            case "start_quest":
                start_quest(call.message, data[1])
            case "q_one_by_one":
                questions_one_by_one(call.message, data[1], int(data[2]))
            case _:
                bot.send_message(
                    call.message.chat.id,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @FoxFil.",
                )
    except Exception as e:
        bot.send_message(
            call.message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def start_quest(message: Message, code: str):
    try:
        bot.edit_message_reply_markup(
            chat_id=message.chat.id, message_id=message.message_id, reply_markup=None
        )

        data = get_geocaches_data(code)

        button_one_by_one = InlineKeyboardButton(
            "–ü–æ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"q_one_by_one;{data[0]};0"
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(button_one_by_one)

        bot.send_message(
            message.chat.id,
            f"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ —Å—Ä–∞–∑—É —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–∞–π–Ω–∏–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /stop –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç",
            reply_markup=keyboard,
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def questions_one_by_one(message: Message, code: str, question_number: int):
    try:
        if question_number == 0:
            bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=None,
            )
        data = get_geocaches_data(code)

        coords, questions, answers = (
            list(map(lambda x: " ".join(x.split()[1:]), data[4].split("\n"))),
            list(map(lambda x: " ".join(x.split()[1:]), data[5].split("\n"))),
            list(map(lambda x: " ".join(x.split()[1:]), data[6].split("\n"))),
        )
        questions_list = []
        for i, question in enumerate(questions):
            questions_list.append(
                f"–í–æ–ø—Ä–æ—Å {i + 1}: *{question}*\n\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: `{coords[i]}`"
            )

        if len(questions_list) + 1 == question_number:
            finish_quest_success(message, code)
        else:
            if question_number == 0:
                question_answer = bot.send_message(
                    message.chat.id,
                    f"{questions_list[question_number]}\n\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.",
                    parse_mode="Markdown",
                )
                bot.register_next_step_handler(
                    question_answer, questions_one_by_one, code, question_number + 1
                )
            else:
                if message.text:
                    given_answer = message.text.lower().strip()
                    if given_answer != "/stop":
                        mistakes = get_mistakes(
                            str(message.from_user.id), code, str(question_number)
                        )

                        if mistakes >= 3:
                            question_answer = bot.send_message(
                                message.chat.id,
                                f"–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–∞–π–Ω–∏–∫–∞. –í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É\n\n{questions_list[question_number]}",
                                parse_mode="Markdown",
                            )
                            bot.register_next_step_handler(
                                question_answer,
                                questions_one_by_one,
                                code,
                                question_number + 1,
                            )
                        else:
                            real_answer = answers[question_number - 1].lower().strip()
                            if given_answer == real_answer:
                                if question_number == len(questions_list):
                                    question_answer = bot.send_message(
                                        message.chat.id,
                                        f"üëç –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æ! (`{given_answer}`)",
                                        parse_mode="Markdown",
                                    )
                                    questions_one_by_one(
                                        question_answer,
                                        code,
                                        question_number + 1,
                                    )
                                else:
                                    question_answer = bot.send_message(
                                        message.chat.id,
                                        f"üëç –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æ! (`{given_answer}`)\n\n{questions_list[question_number]}",
                                        parse_mode="Markdown",
                                    )
                                    bot.register_next_step_handler(
                                        question_answer,
                                        questions_one_by_one,
                                        code,
                                        question_number + 1,
                                    )
                            else:
                                if mistakes >= 2:
                                    if question_number == len(questions_list):
                                        question_answer = bot.send_message(
                                            message.chat.id,
                                            f"üëé –í–∞—à –æ—Ç–≤–µ—Ç (`{given_answer}`) - –Ω–µ–≤–µ—Ä–Ω—ã–π. –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–∞–π–Ω–∏–∫–∞.",
                                            parse_mode="Markdown",
                                        )
                                        add_mistake(
                                            str(message.from_user.id),
                                            code,
                                            str(question_number),
                                        )
                                        questions_one_by_one(
                                            question_answer,
                                            code,
                                            question_number + 1,
                                        )
                                    else:
                                        question_answer = bot.send_message(
                                            message.chat.id,
                                            f"üëé –í–∞—à –æ—Ç–≤–µ—Ç (`{given_answer}`) - –Ω–µ–≤–µ—Ä–Ω—ã–π. –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–∞–π–Ω–∏–∫–∞. –í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É\n\n{questions_list[question_number]}",
                                            parse_mode="Markdown",
                                        )
                                        add_mistake(
                                            str(message.from_user.id),
                                            code,
                                            str(question_number),
                                        )
                                        bot.register_next_step_handler(
                                            question_answer,
                                            questions_one_by_one,
                                            code,
                                            question_number + 1,
                                        )
                                else:
                                    if mistakes == 0:
                                        question_answer = bot.send_message(
                                            message.chat.id,
                                            f"üëé –í–∞—à –æ—Ç–≤–µ—Ç (`{given_answer}`) - –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å 2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.",
                                            parse_mode="Markdown",
                                        )
                                    elif mistakes == 1:
                                        question_answer = bot.send_message(
                                            message.chat.id,
                                            f"üëé –í–∞—à –æ—Ç–≤–µ—Ç (`{given_answer}`) - –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–∞—Å—å 1 –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.",
                                            parse_mode="Markdown",
                                        )

                                    add_mistake(
                                        str(message.from_user.id),
                                        code,
                                        str(question_number),
                                    )
                                    bot.register_next_step_handler(
                                        question_answer,
                                        questions_one_by_one,
                                        code,
                                        question_number,
                                    )
                    else:
                        stop_answering_question(message)
                else:
                    sticker_message = bot.send_message(
                        message.chat.id,
                        f"‚ùå –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É.\n\n{questions_list[question_number - 1]}",
                        parse_mode="Markdown",
                    )
                    bot.register_next_step_handler(
                        sticker_message, questions_one_by_one, code, question_number
                    )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def finish_quest_success(message: Message, code: str):
    try:
        data = get_geocaches_data(code)

        questions, answers = (
            list(map(lambda x: " ".join(x.split()[1:]), data[5].split("\n"))),
            list(map(lambda x: " ".join(x.split()[1:]), data[6].split("\n"))),
        )

        questions_list = []
        for i, _ in enumerate(questions):
            questions_list.append(f"*–í–æ–ø—Ä–æ—Å {i + 1}*: `{answers[i]}`\n\n")

        bot.send_message(
            message.chat.id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n{''.join(questions_list)}",
            parse_mode="Markdown",
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def stop_answering_question(message: Message):
    try:
        bot.send_message(
            message.chat.id,
            f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–∞–π–Ω–∏–∫–∞.",
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def create_cache(message: Message, code=""):
    try:
        bot.edit_message_reply_markup(
            chat_id=message.chat.id, message_id=message.message_id, reply_markup=None
        )
        if check_if_on_confirmation(code):
            delete_from_on_confirmation(code)
        button_start = InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start_creation")
        keyboard = InlineKeyboardMarkup()
        keyboard.add(button_start)
        bot.send_message(
            message.chat.id,
            f"–¢—ã –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–Ω–∏–∫–∞. –¢–µ–±–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ —Ç–∞–π–Ω–∏–∫–∞. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç–µ–±–µ –Ω–∞–¥–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö.",
            reply_markup=keyboard,
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_add_code(message: Message):
    try:
        bot.edit_message_reply_markup(
            chat_id=message.chat.id, message_id=message.message_id, reply_markup=None
        )
        cache_code = bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ —Ç–∞–π–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX00000, –≥–¥–µ XX - –±—É–∫–≤—ã —Ç–∞–π–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TR, VI), –∞ 00000 - –∫–æ–¥ —Ç–∞–π–Ω–∏–∫–∞.",
        )
        bot.register_next_step_handler(cache_code, creation_add_name)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_add_name(message: Message):
    try:
        if message.text and message.text[:2].isalpha() and message.text[2:].isdigit():
            if not check_if_in_geocaches(message.text.upper()):
                data = [message.text]
                cache_name = bot.send_message(
                    message.chat.id,
                    "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π–Ω–∏–∫–∞.",
                )
                bot.register_next_step_handler(
                    cache_name, creation_add_description, data
                )
            else:
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –î–∞–Ω–Ω—ã–π —Ç–∞–π–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ `/start {message.text.upper()}`",
                    parse_mode="Markdown",
                )
        else:
            cache_code = bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ —Ç–∞–π–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX00000, –≥–¥–µ XX - –±—É–∫–≤—ã —Ç–∞–π–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TR, VI), –∞ 00000 - –∫–æ–¥ —Ç–∞–π–Ω–∏–∫–∞.",
            )
            bot.register_next_step_handler(cache_code, creation_add_name)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_add_description(message: Message, data: list):
    try:
        if message.text and len(message.text) <= 50:
            data.append(message.text)
            cache_description = bot.send_message(
                message.chat.id,
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–π–Ω–∏–∫–∞ (–Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤).",
            )
            bot.register_next_step_handler(cache_description, creation_add_image, data)
        else:
            cache_code = bot.send_message(
                message.chat.id,
                "‚ùå –ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–∞–π–Ω–∏–∫–∞ –±–æ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π–Ω–∏–∫–∞.",
            )
            bot.register_next_step_handler(cache_code, creation_add_description, data)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_add_image(message: Message, data: list):
    try:
        if message.text and len(message.text) <= 500:
            data.append(message.text)
            cache_image = bot.send_message(
                message.chat.id,
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–∞–π–Ω–∏–∫–∞.",
            )
            bot.register_next_step_handler(cache_image, creation_add_coords, data)
        else:
            cache_description = bot.send_message(
                message.chat.id,
                "‚ùå –ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–π–Ω–∏–∫–∞ –±–æ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª–æ–≤! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–π–Ω–∏–∫–∞ (–Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤).",
            )
            bot.register_next_step_handler(cache_description, creation_add_image, data)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_add_coords(message: Message, data: list):
    try:
        if message.photo:
            data.append(message.photo[-1].file_id)
            cache_coords = bot.send_message(
                message.chat.id,
                """–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ —Ç–∞–π–Ω–∏–∫–∞, –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

`1. N 00 00.000 E 00 00.000`
`2. N 11 11.111 E 11 11.111`
`3. N 22 22.222 E 22 22.222`

‚ö† –í–ê–ñ–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–≤–æ–º—É –æ—Ç–≤–µ—Ç—É –∏ —Ç.–¥.""",
                parse_mode="Markdown",
            )
            bot.register_next_step_handler(cache_coords, creation_add_questions, data)
        else:
            photo = bot.send_message(
                message.chat.id,
                "‚ùå –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–∞–π–Ω–∏–∫–∞.",
            )
            bot.register_next_step_handler(photo, creation_add_coords, data)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_add_questions(message: Message, data: list):
    try:
        OK = True
        if message.text:
            for elem in list(
                map(lambda x: " ".join(x.split()[1:]), message.text.split("\n"))
            ):
                if check_coords(elem):
                    pass
                else:
                    OK = False
        else:
            OK = False
        if OK:
            data.append(message.text)
            cache_questions = bot.send_message(
                message.chat.id,
                """–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ—á–µ–∫ —Ç–∞–π–Ω–∏–∫–∞, –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

`1. –ö–∞–∫ –¥–µ–ª–∞?`
`2. –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?`
`3. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å?`

‚ö† –í–ê–ñ–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–≤–æ–º—É –æ—Ç–≤–µ—Ç—É –∏ —Ç.–¥.""",
                parse_mode="Markdown",
            )
            bot.register_next_step_handler(cache_questions, creation_add_answers, data)
        else:
            cache_coords = bot.send_message(
                message.chat.id,
                """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ —Ç–∞–π–Ω–∏–∫–∞, –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

`1. N 00 00.000 E 00 00.000`
`2. N 11 11.111 E 11 11.111`
`3. N 22 22.222 E 22 22.222`

‚ö† –í–ê–ñ–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–≤–æ–º—É –æ—Ç–≤–µ—Ç—É –∏ —Ç.–¥.""",
                parse_mode="Markdown",
            )
            bot.register_next_step_handler(cache_coords, creation_add_questions, data)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_add_answers(message: Message, data: list):
    try:
        if message.text and len(
            list(map(lambda x: " ".join(x.split()[1:]), data[4].split("\n")))
        ) == len(
            list(map(lambda x: " ".join(x.split()[1:]), message.text.split("\n")))
        ):
            data.append(message.text)
            cache_answers = bot.send_message(
                message.chat.id,
                """–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–µ–∫ —Ç–∞–π–Ω–∏–∫–∞, –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

`1. –•–æ—Ä–æ—à–æ`
`2. –°–æ–ª–Ω–µ—á–Ω–æ`
`3. –ì—É–ª—è—é`

‚ö† –í–ê–ñ–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–≤–æ–º—É –æ—Ç–≤–µ—Ç—É –∏ —Ç.–¥.""",
                parse_mode="Markdown",
            )
            bot.register_next_step_handler(cache_answers, creation_final, data)
        else:
            cache_questions = bot.send_message(
                message.chat.id,
                f"""‚ùå –ö–∞–∂–µ—Ç—Å—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ª–∏–±–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä!

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ—á–µ–∫ —Ç–∞–π–Ω–∏–∫–∞, –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

`1. –ö–∞–∫ –¥–µ–ª–∞?`
`2. –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?`
`3. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å?`

‚ö† –í–ê–ñ–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–≤–æ–º—É –æ—Ç–≤–µ—Ç—É –∏ —Ç.–¥.""",
                parse_mode="Markdown",
            )
            bot.register_next_step_handler(cache_questions, creation_add_answers, data)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_final(message: Message, data: list):
    try:
        if message.text and len(
            list(map(lambda x: " ".join(x.split()[1:]), data[5].split("\n")))
        ) == len(
            list(map(lambda x: " ".join(x.split()[1:]), message.text.split("\n")))
        ):
            data.append(message.text)

            insert_in_db(data[0], data[1], data[2], data[3], data[4], data[5], data[6])

            coords, questions, answers = (
                list(map(lambda x: " ".join(x.split()[1:]), data[4].split("\n"))),
                list(map(lambda x: " ".join(x.split()[1:]), data[5].split("\n"))),
                list(map(lambda x: " ".join(x.split()[1:]), data[6].split("\n"))),
            )
            questions_message = ""
            for i, question in enumerate(questions):
                questions_message += (
                    f"`{i + 1}. {question} | {coords[i]} | {answers[i]}`\n"
                )

            button_confirm = InlineKeyboardButton(
                "‚úÖ", callback_data=f"creation_confirmed;{data[0]}"
            )
            button_repeat = InlineKeyboardButton(
                "üîÑ", callback_data=f"create_cache_callbacak;{data[0]}"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(button_confirm, button_repeat)

            bot.send_photo(message.chat.id, data[3])

            bot.send_message(
                message.chat.id,
                f"""–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º —Ç–∞–π–Ω–∏–∫–µ.

*–ö–æ–¥*: `{data[0]}`

*–ù–∞–∑–≤–∞–Ω–∏–µ*: `{data[1]}`

*–û–ø–∏—Å–∞–Ω–∏–µ*:

`{data[2]}`

*–ö–∞—Ä—Ç–∏–Ω–∫–∞*: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ã—à–µ

*–í–æ–ø—Ä–æ—Å—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏*:

{questions_message}

–ü—Ä–æ–≤–µ—Ä—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞–∂–º–∏ ‚úÖ, –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ. –ï—Å–ª–∏ –Ω–∞—à–µ–ª –æ—à–∏–±–∫—É, –Ω–∞–∂–º–∏ üîÑ –∏ —Å–æ–∑–¥–∞–π —Ç–∞–π–Ω–∏–∫ –∑–∞–Ω–æ–≤–æ.""",
                parse_mode="Markdown",
                reply_markup=keyboard,
            )
        else:
            cache_answers = bot.send_message(
                message.chat.id,
                """‚ùå –ö–∞–∂–µ—Ç—Å—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–µ–∫ —Ç–∞–π–Ω–∏–∫–∞, –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:

`1. –•–æ—Ä–æ—à–æ`
`2. –°–æ–ª–Ω–µ—á–Ω–æ`
`3. –ì—É–ª—è—é`

‚ö† –í–ê–ñ–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–≤–æ–º—É –æ—Ç–≤–µ—Ç—É –∏ —Ç.–¥.""",
                parse_mode="Markdown",
            )
            bot.register_next_step_handler(cache_answers, creation_final, data)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def creation_successful(message: Message, code: str):
    try:
        bot.edit_message_reply_markup(
            chat_id=message.chat.id, message_id=message.message_id, reply_markup=None
        )
        move_to_db(code)
        bot.send_message(
            message.chat.id,
            f"‚úÖ –¢–∞–π–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É. –°—Å—ã–ª–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: t.me/GeocachingSU_Bot?start={code} –°–ø–∞—Å–∏–±–æ!",
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


bot.infinity_polling()
